{
  "name": "redux-logger",
  "version": "2.7.4",
  "description": "Logger for Redux",
  "main": "lib/index.js",
  "scripts": {
    "lint": "$(npm bin)/eslint src",
    "test": "NODE_ENV=development npm run lint && npm run spec",
    "test:production": "NODE_ENV=production npm run lint && npm run spec",
    "spec": "NODE_PATH=src nyc --all --silent --require babel-core/register mocha --plugins transform-inline-environment-variables --recursive spec/*.spec.js",
    "spec:watch": "NODE_ENV=development npm run spec -- --watch",
    "coverage": "nyc report",
    "coverage:html": "nyc report --reporter=html && (http-server -p 8077 ./coverage & open-url http://localhost:8077/)",
    "coverage:production": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "clean": "$(npm bin)/rimraf dist lib",
    "build:lib": "$(npm bin)/babel src --out-dir lib",
    "build:umd": "LIBRARY_NAME=reduxLogger NODE_ENV=development $(npm bin)/webpack src/index.js dist/index.js --config webpack.build.js",
    "build:umd:min": "LIBRARY_NAME=reduxLogger NODE_ENV=production $(npm bin)/webpack -p src/index.js dist/index.min.js --config webpack.build.js",
    "build": "npm run build:lib && npm run build:umd && npm run build:umd:min",
    "precommit": "npm run test",
    "prepublish": "npm run clean && npm run test:production && npm run build"
  },
  "nyc": {
    "exclude": [
      "node_modules",
      "spec",
      "example",
      "lib",
      "dist",
      "webpack.*.js"
    ]
  },
  "files": [
    "dist",
    "lib",
    "src"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/theaqua/redux-logger.git"
  },
  "keywords": [
    "redux",
    "logger",
    "redux-logger",
    "redux",
    "middleware"
  ],
  "author": {
    "name": "Eugene Rodionov",
    "url": "https://github.com/theaqua"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/theaqua/redux-logger/issues"
  },
  "homepage": "https://github.com/theaqua/redux-logger#readme",
  "devDependencies": {
    "@dtrussia/eslint-config-dtrussia": "2.2.1",
    "babel-cli": "6.3.13",
    "babel-core": "6.3.13",
    "babel-eslint": "6.0.4",
    "babel-loader": "6.2.0",
    "babel-plugin-add-module-exports": "0.1.1",
    "babel-plugin-transform-inline-environment-variables": "6.3.13",
    "babel-preset-es2015": "6.3.13",
    "babel-preset-react": "6.3.13",
    "babel-preset-stage-0": "6.3.13",
    "chai": "3.5.0",
    "codecov": "1.0.1",
    "eslint": "2.10.2",
    "eslint-plugin-react": "5.1.1",
    "http-server": "0.9.0",
    "husky": "0.11.8",
    "mocha": "2.4.5",
    "nyc": "6.4.4",
    "open-url": "2.0.2",
    "rimraf": "2.4.4",
    "webpack": "1.12.9"
  },
  "dependencies": {
    "deep-diff": "0.3.4"
  },
  "readme": "# Logger for Redux\n[![npm](https://img.shields.io/npm/v/redux-logger.svg?maxAge=2592000?style=plastic)]()\n[![npm](https://img.shields.io/npm/dm/redux-logger.svg?maxAge=2592000?style=plastic)]()\n[![Build Status](https://travis-ci.org/evgenyrodionov/redux-logger.svg?branch=master)](https://travis-ci.org/evgenyrodionov/redux-logger)\n[![dependencies Status](https://david-dm.org/evgenyrodionov/redux-logger/status.svg)](https://david-dm.org/evgenyrodionov/redux-logger)\n\n![redux-logger](http://i.imgur.com/pMR3OAv.png)\n\n## Table of contents\n* [Install](#install)\n* [Usage](#usage)\n* [API](#api)\n* [Recipes](#recipes)\n  * [Log only in development](#log-only-in-development)\n  * [Transform `Symbol()` action type to string](#transform-symbol-action-type-to-string)\n  * [Log everything except actions with certain type](#log-everything-except-actions-with-certain-type)\n  * [Collapse actions with certain type](#collapse-actions-with-certain-type)\n  * [Transform Immutable (without `combineReducers`)](#transform-immutable-without-combinereducers)\n  * [Transform Immutable (with `combineReducers`)](#transform-immutable-with-combinereducers)\n  * [Log batched actions](#log-batched-actions)\n* [Known issues](#known-issues) (with `react-native` only at this moment)\n* [License](#license)\n\n## Install\n`npm i --save redux-logger`\n\n## Usage\n```javascript\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise';\nimport createLogger from 'redux-logger';\n\nconst logger = createLogger();\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, promise, logger)\n);\n\n// Note passing middleware as the third argument requires redux@>=3.1.0\n```\nLogger **must be** the last middleware in chain, otherwise it will log thunk and promise, not actual actions ([#20](https://github.com/evgenyrodionov/redux-logger/issues/20)).\n\n## API\n\n`redux-logger` exposes single constructor function for creating logger middleware.  \n\n```\ncreateLogger(options?: Object) => LoggerMiddleware\n```\n\n### Options\n```javascript\n{\n  level = 'log': 'log' | 'console' | 'warn' | 'error' | 'info', // console's level\n  duration = false: Boolean, // Print the duration of each action?\n  timestamp = true: Boolean, // Print the timestamp with each action?\n  colors: ColorsObject, // Object with color getters. See the ColorsObject interface.\n  logger = console: LoggerObject, // Implementation of the `console` API.\n  logErrors = true: Boolean, // Should the logger catch, log, and re-throw errors?\n  collapsed, // Takes a boolean or optionally a function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.\n  predicate, // If specified this function will be called before each action is processed with this middleware.\n  stateTransformer, // Transform state before print. Eg. convert Immutable object to plain JSON.\n  actionTransformer, // Transform state before print. Eg. convert Immutable object to plain JSON.\n  errorTransformer, // Transform state before print. Eg. convert Immutable object to plain JSON.\n  titleFormatter, // Format the title used when logging actions.\n  diff = false: Boolean, // Show diff between states.\n  diffPredicate // Filter function for showing states diff.'\n}\n```\n\n### Options\n\n#### __level (String | Function | Object)__\nLevel of `console`. `warn`, `error`, `info` or [else](https://developer.mozilla.org/en/docs/Web/API/console).\n\nIt can be a function `(action: Object) => level: String`.\n\nIt can be an object with level string for: `prevState`, `action`, `nextState`, `error`\n\nIt can be an object with getter functions: `prevState`, `action`, `nextState`, `error`. Useful if you want to print\nmessage based on specific state or action. Set any of them to `false` if you want to hide it.\n\n* `prevState(prevState: Object) => level: String`\n* `action(action: Object) => level: String`\n* `nextState(nextState: Object) => level: String`\n* `error(error: Any, prevState: Object) => level: String`\n\n*Default: `log`*\n\n#### __duration (Boolean)__\nPrint duration of each action?\n\n*Default: `false`*\n\n#### __timestamp (Boolean)__\nPrint timestamp with each action?\n\n*Default: `true`*\n\n#### __colors (Object)__\nObject with color getter functions: `title`, `prevState`, `action`, `nextState`, `error`. Useful if you want to paint\nmessage based on specific state or action. Set any of them to `false` if you want to show plain message without colors.\n\n* `title(action: Object) => color: String`\n* `prevState(prevState: Object) => color: String`\n* `action(action: Object) => color: String`\n* `nextState(nextState: Object) => color: String`\n* `error(error: Any, prevState: Object) => color: String`\n\n#### __logger (Object)__\nImplementation of the `console` API. Useful if you are using a custom, wrapped version of `console`.\n\n*Default: `console`*\n\n#### __logErrors (Boolean)__\nShould the logger catch, log, and re-throw errors? This makes it clear which action triggered the error but makes \"break\non error\" in dev tools harder to use, as it breaks on re-throw rather than the original throw location.\n\n*Default: `true`*\n\n#### __collapsed = (getState: Function, action: Object) => Boolean__\nTakes a boolean or optionally a function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.\n\n*Default: `false`*\n\n#### __predicate = (getState: Function, action: Object) => Boolean__\nIf specified this function will be called before each action is processed with this middleware.\nReceives `getState` function for  accessing current store state and `action` object as parameters. Returns `true` if action should be logged, `false` otherwise.\n\n*Default: `null` (always log)*\n\n#### __stateTransformer = (state: Object) => state__\nTransform state before print. Eg. convert Immutable object to plain JSON.\n\n*Default: identity function*\n\n#### __actionTransformer = (action: Object) => action__\nTransform action before print. Eg. convert Immutable object to plain JSON.\n\n*Default: identity function*\n\n#### __errorTransformer = (error: Any) => error__\nTransform error before print.\n\n*Default: identity function*\n\n#### __titleFormatter = (action: Object, time: String?, took: Number?) => title__\nFormat the title used for each action.\n\n*Default: prints something like `action @ ${time} ${action.type} (in ${took.toFixed(2)} ms)`*\n\n#### __diff (Boolean)__\nShow states diff.\n\n*Default: `false`*\n\n#### __diffPredicate = (getState: Function, action: Object) => Boolean__\nFilter states diff for certain cases.\n\n*Default: `undefined`*\n\n## Recipes\n### Log only in development\n```javascript\nimport thunk from 'redux-thunk';\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === `development`) {\n  const createLogger = require(`redux-logger`);\n  const logger = createLogger();\n  middlewares.push(logger);\n}\n\nconst store = compose(applyMiddleware(...middlewares))(createStore)(reducer);\n```\n\n### Transform `Symbol()` action type to string\n```javascript\nimport createLogger from 'redux-logger';\n\nconst logger = createLogger({\n  actionTransformer: (action) => ({\n    ...action,\n    type: String(action.type),\n  })\n});\n```\n\n### Log everything except actions with certain type\n```javascript\ncreateLogger({\n  predicate: (getState, action) => action.type !== AUTH_REMOVE_TOKEN\n});\n```\n\n### Collapse actions with certain type\n```javascript\ncreateLogger({\n  collapsed: (getState, action) => action.type === FORM_CHANGE\n});\n```\n\n### Transform Immutable (without `combineReducers`)\n```javascript\nimport { Iterable } from 'immutable';\n\nconst stateTransformer = (state) => {\n  if (Iterable.isIterable(state)) return state.toJS();\n  else return state;\n};\n\nconst logger = createLogger({\n  stateTransformer,\n});\n```\n\n### Transform Immutable (with `combineReducers`)\n```javascript\nconst logger = createLogger({\n  stateTransformer: (state) => {\n    let newState = {};\n\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n\n    return newState;\n  }\n});\n```\n\n### Log batched actions\nThanks to [@smashercosmo](https://github.com/smashercosmo)\n```javascript\nimport createLogger from 'redux-logger';\n\nconst actionTransformer = action => {\n  if (action.type === 'BATCHING_REDUCER.BATCH') {\n    action.payload.type = action.payload.map(next => next.type).join(' => ');\n    return action.payload;\n  }\n\n  return action;\n};\n\nconst level = 'info';\n\nconst logger = {};\n\nfor (const method in console) {\n  if (typeof console[method] === 'function') {\n    logger[method] = console[method].bind(console);\n  }\n}\n\nlogger[level] = function levelFn(...args) {\n  const lastArg = args.pop();\n\n  if (Array.isArray(lastArg)) {\n    return lastArg.forEach(item => {\n      console[level].apply(console, [...args, item]);\n    });\n  }\n\n  console[level].apply(console, arguments);\n};\n\nexport default createLogger({\n  level,\n  actionTransformer,\n  logger\n});\n```\n\n## Known issues\n* Performance issues in react-native ([#32](https://github.com/evgenyrodionov/redux-logger/issues/32))\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "redux-logger@2.7.4",
  "dist": {
    "shasum": "1120e2ccfc609cb18be73f3c2b1c3aae8d42172c"
  },
  "_from": "redux-logger@latest",
  "_resolved": "https://registry.npmjs.org/redux-logger/-/redux-logger-2.7.4.tgz"
}
